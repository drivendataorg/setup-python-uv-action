name: "Set up Python and uv"
description: "Sets up Python, installs uv, sets up uv cache, and creates and activates a virtual environment."
inputs:
  python-version:
    description: "Version range or exact version of Python or PyPy to use, using SemVer's version range syntax. Reads from .python-version if unset. Passed to setup-python."
  cache:
    description: "If set to 'packages', will cache uv's cache directory. If set to 'venv', will cache the virtual environment. By default, no caching will happen."
  cache-dependency-path:
    description: "Specify dependency files to hash for cache key. Supports wildcards or a list of file names separated by spaces."
outputs:
  python-version:
    description: "The version of Python that was set up."
    value: ${{ steps.setup-python.outputs.python-version }}
  cache-hit:
    description: "Whether the cache was restored."
    value: ${{ steps.setup-uv-cache.outputs.cache-hit }}
  python-path:
    description: "The path to the Python executable."
    value: ${{ steps.setup-python.outputs.python-path }}
  uv-path:
    description: "The path to the uv executable."
    value: ${{ steps.install-uv.outputs.uv-path }}
  virtual-env:
    description: "The path to the virtual environment created and activated by this action."
    value: ${{ steps.setup-uv.outputs.venv-dir }}
runs:
  using: "composite"
  steps:
    - name: Set up Python
      id: setup-python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python-version }}

    - name: Set up uv
      id: setup-uv
      shell: bash
      run: |
        pipx install uv
        echo "uv-path=$(which uv)" >> $GITHUB_OUTPUT
        echo "uv-cache-dir=$(uv cache dir)" >> $GITHUB_OUTPUT
        echo "venv-dir=$HOME/.venv" >> $GITHUB_OUTPUT

    - name: Windows venv dir (Windows)
      id: venv-dir-windows
      if: ${{ inputs.cache == 'venv' && runner.os == 'Windows'}}
      shell: bash
      run: |
        # actions/cache needs a Windows-style path for Windows, not Unix-style
        echo "venv-dir=$(cygpath -w ${{ steps.setup-uv.outputs.venv-dir }})" >> $GITHUB_OUTPUT

    - name: Generate checksum of cache dependencies
      id: cache-dependency-checksum
      if: ${{ (inputs.cache == 'packages' || inputs.cache == 'venv') && inputs.cache-dependency-path }}
      shell: bash
      run: |
        echo "checksum-suffix=-$(python checksum.py ${{ inputs.cache-dependency-path }})" >> $GITHUB_OUTPUT

    - name: Set up package cache
      id: setup-package-cache
      uses: actions/cache@v4
      if: ${{ inputs.cache == 'packages' }}
      with:
        path: |
          ${{ steps.setup-uv.outputs.uv-cache-dir }}
        key: setup-python-uv-action-packages-${{ runner.os }}${{ steps.cache-dependency-checksum.outputs.checksum-suffix }}
        save-always: true

    - name: Set up venv cache
      id: setup-venv-cache
      uses: actions/cache@v4
      if: ${{ inputs.cache == 'venv' }}
      with:
        path: |
          ${{ runner.os == 'Windows' && steps.venv-dir-windows.outputs.venv-dir || steps.setup-uv.outputs.venv-dir }}
        key: setup-python-uv-action-venv-${{ runner.os }}-python-${{ inputs.python-version }}${{ steps.cache-dependency-checksum.outputs.checksum-suffix }}
        save-always: true

    - name: Create virtual environment
      if: ${{ !(inputs.cache == 'venv' && steps.setup-venv-cache.outputs.cache-hit == 'true') }}
      shell: bash
      run: |
        uv venv $HOME/.venv

    - name: Activate virtual environment (Unix)
      if: ${{ runner.os != 'Windows' }}
      shell: bash
      run: |
        echo "${{ steps.setup-uv.outputs.venv-dir }}/bin" >> $GITHUB_PATH
        echo "VIRTUAL_ENV=${{ steps.setup-uv.outputs.venv-dir }}" >> $GITHUB_ENV

    - name: Activate virtual environment (Windows)
      if: ${{ runner.os == 'Windows' }}
      shell: pwsh
      run: |
        echo "${{ steps.venv-dir-windows.outputs.venv-dir }}\Scripts" >> $GITHUB_PATH
        ${{ steps.venv-dir-windows.outputs.venv-dir }}\Scripts\activate
        echo "VIRTUAL_ENV=$VIRTUAL_ENV" >> $GITHUB_ENV
